@page "/dashboard"

<PageTitle>Dashboard</PageTitle>

@using MissionSystem.Main.Time
@using MissionSystem.Interface.Timer
@inject IGameTimerService gameTimerService

@implements IDisposable
@using MissionSystem.Main.Gadgets
@using MissionSystem.Interface
@using Newtonsoft.Json
@using System.Net.NetworkInformation
@inject IGadgetStateService _gadgets

@inject IGameService _game
@inject ILogger<Index> _logger

<h1>Dashboard</h1>

<div class = "timer">
    <h2 class = "timerHeader">
        Timer: @(_timer?.ToString() ?? "00:00")
    </h2>
    <button class = "btn btn-timer start" @onclick="NewTimer"><span class = "oi oi-plus" /></button>
    <button class = "btn btn-timer continue" @onclick="ContinueTimer"><span class = "oi oi-media-play" /></button>
    <button class = "btn btn-timer pause" @onclick="PauseTimer"><span class = "oi oi-media-pause" /></button>
    <button class = "btn btn-timer stop" @onclick="StopTimer"><span class = "oi oi-media-stop" /></button>

    <p>"Team 1 score: @(team1Score ?? "0") - Team 2 score: @(team2Score ?? "0")"</p>
</div>

@code {
    private ITimer? _timer;
    private IDisposable? _subscription;
    private IBaseGame ctf;

    private string team1Score;
    private string team2Score;



    protected override void OnInitialized()
    {
        ctf = _game.GetGame("CTF");
        ctf.Setup();
        ctf.data += Update;

        // _subscription = _gadgets.StateUpdatesOf(PhysicalAddress.Parse("92-22-21-82-1D-31"), OnFlagUpdate);
    }

    private void Update(object? sender, string data) {
        Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)JsonConvert.DeserializeObject(data);
        team1Score = obj["Team1Score"].ToString();
        team2Score = obj["Team2Score"].ToString();
    }

    private void OnTick(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
        Console.WriteLine(_timer);
    }

    private void NewTimer()
    {
        if (_timer == null) _timer = ctf.GetTimer();
        else _timer = ctf.GetNewTimer();

        _timer.Update += OnTick;

        _timer.StartTimer();
    }

    private void PauseTimer()
    {
        if (_timer == null) return;

        _timer.PauseTimer();
    }

    private void ContinueTimer()
    {
        if (_timer == null) return;

        _timer.ContinueTimer();
    }

    private void StopTimer()
    {
        if (_timer == null) return;

        _timer.StopTimer();

    }

    public void Dispose()
    {
        _subscription?.Dispose();
    }
}
