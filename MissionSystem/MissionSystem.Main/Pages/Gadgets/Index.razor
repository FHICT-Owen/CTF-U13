@page "/gadgets"
@using MissionSystem.Util
@using MissionSystem.Interface.Services
@using System.Net.NetworkInformation
@using MissionSystem.Data.Models
@implements IDisposable
@inject IGadgetService GadgetService

<h3>Gadgets</h3>

<CreateForm></CreateForm>

<table class="table">
    <thead>
    <tr>
        <td>Name</td>
        <td>Type</td>
        <td>Address</td>
        <td>Actions</td>
    </tr>
    </thead>
    <tbody>
    @foreach (var (_, gadget) in _gadgets)
    {
        <tr>
            <td>@gadget.Name</td>
            <td>@gadget.Type.Name</td>
            <td>@gadget.MacAddress.ToFormattedString()</td>
            <td>
                <a class="btn btn-warning" href="/gadgets/edit/@gadget.MacAddress">Edit</a>
                <button class="btn btn-danger" @onclick="() => DeleteGadget(gadget)">Delete</button>
            </td>
        </tr>
    }
    </tbody>
</table>

@code {
    private readonly Dictionary<PhysicalAddress, Gadget> _gadgets = new();

    protected override async Task OnInitializedAsync()
    {
        foreach (var gadget in await GadgetService.GetGadgetsAsync())
        {
            _gadgets[gadget.MacAddress] = gadget;
        }

        GadgetService.Added += OnGadgetAdded;
        GadgetService.Deleted += OnGadgetDeleted;
    }

    private void OnGadgetDeleted(Gadget gadget)
    {
        InvokeAsync(() =>
        {
            _gadgets.Remove(gadget.MacAddress);
            StateHasChanged();
        });
    }

    private void OnGadgetAdded(Gadget gadget)
    {
        InvokeAsync(() =>
        {
            _gadgets[gadget.MacAddress] = gadget;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        GadgetService.Added -= OnGadgetAdded;
        GadgetService.Deleted -= OnGadgetDeleted;
    }

    private async void DeleteGadget(Gadget gadget)
    {
        await GadgetService.DeleteGadgetAsync(gadget);
    }

}
