@page "/"
@using MissionSystem.Main.Gadgets
@using System.Net.NetworkInformation
@implements IDisposable
@inject IGadgetStateService _gadgets
@inject ILogger<Index> _logger

<PageTitle>CTF Demo</PageTitle>

<div class="timer">
    <span>00:00</span>
</div>
<div class="demo">
    <div class="score">
        <h2>Team 1</h2>
        <span>200</span>
    </div>
    <div class="status">
        <img class="flag-icon" src="img/flag.png" alt="Icon of a flag"/>
        <span>@_capturedBy</span>
        <ProgressBar Progress="@_capturePercentage"></ProgressBar>
    </div>
    <div class="score">
        <h2>Team 2</h2>
        <span>200</span>
    </div>
</div>
<div class="controls">
    @{
        if (!_started)
        {
            <button class="btn btn-outline-success" @onclick="@StartMatch">Start</button>
        }
        else
        {
            <button class="btn btn-outline-danger" @onclick="@StopMatch">Stop</button>
        }
    }
    <button class="btn btn-outline-warning">Reset</button>
</div>

@code {
    private string _capturedBy = "";
    private long _capturePercentage;
    private bool _started = false;

    private IDisposable? _subscription;

    protected override void OnInitialized()
    {
        _subscription = _gadgets.StateUpdatesOf(PhysicalAddress.Parse("44:17:93:87:D3:DC"), OnFlagUpdate);
    }

    private void StartMatch()
    {
        _started = true;
    }

    private void StopMatch()
    {
        _started = false;
    }

    private void OnFlagUpdate(Dictionary<string, object> state)
    {
        try
        {
            var flagState = FlagState.FromRaw(state);

            _capturedBy = $"Team {flagState.CapturedBy}";
            _capturePercentage = flagState.CapturePercentage;
            InvokeAsync(StateHasChanged);
        }
        catch (Exception e)
        {
    // TODO: should log or something
            _logger.LogError("Could not parse flag state");
        }
    }

    public void Dispose()
    {
        _subscription?.Dispose();
    }

}
