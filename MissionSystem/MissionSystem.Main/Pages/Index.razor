@page "/"
@using MissionSystem.Main.Gadgets
@using MissionSystem.Interface
@using Newtonsoft.Json
@using System.Net.NetworkInformation
@using MissionSystem.Interface.Timer

@implements IDisposable
@inject IGadgetStateService _gadgets

@inject IGameService _game
@inject ILogger<Index> _logger

<PageTitle>CTF Demo</PageTitle>

<style>
    .flag::before {
        width: 100px !important;
        height: 100px !important;
    }
</style>

<div class="timer">
    <span>@(_timer?.ToString() ?? "00:00")</span>
</div>
<div class="demo">
    <div class="score">
        <h2>Team Green</h2>
        <span>@(team1Score ?? "0")</span>
    </div>
    <div class="status">
        @*<span class="oi oi-flag flag" />*@
        <img class="flag-icon" src="img/flag.png" alt="Icon of a flag" color="red"/>
        <span>@_capturedBy</span>
        <ProgressBar Progress="@_capturePercentage" ForegroundColor="@_foregroundColor" BackgroundColor="@_backgroundColor"></ProgressBar>
    </div>
    <div class="score">
        <h2>Team Red</h2>
        <span>@(team2Score ?? "0")</span>
    </div>
</div>
<div class="controls">
    @{
        if (!_started)
        {
            <button class="btn btn-outline-success" @onclick="@StartMatch">Start</button>
        }
        else
        {
            <button class="btn btn-outline-danger" @onclick="@StopMatch">Stop</button>
        }
    }
    <button class="btn btn-outline-warning" @onclick="@ResetMatch">Reset</button>
</div>

@code {
    private string _capturedBy = "0";
    private long _capturePercentage;
    private bool _started = false;

    private IBaseGame ctf;
    private ITimer? _timer;

    private string team1Score;
    private string team2Score;

    private IDisposable? _subscription;

    private string _backgroundColor = "#8D99AE";
    private string _foregroundColor = "#342E37";

    protected override void OnInitialized()
    {
        // _subscription = _gadgets.StateUpdatesOf(PhysicalAddress.Parse("44:17:93:87:D3:DC"), OnFlagUpdate);

        ctf = _game.GetGame("CTF");
        ctf.data += Update;

        _timer = ctf.GetTimer();
        _timer.Update += OnTick;
    }

    private void Update(object? sender, string data) {
        Newtonsoft.Json.Linq.JObject obj = (Newtonsoft.Json.Linq.JObject)JsonConvert.DeserializeObject(data);
        team1Score = obj["Team1Score"].ToString();
        team2Score = obj["Team2Score"].ToString();
        string percentage = obj["FlagState"]["CapturePercentage"].ToString();
        string capturer = obj["FlagState"]["Capturer"].ToString();
        if (capturer == "1") _foregroundColor = "#00FF00";
        if (capturer == "2") _foregroundColor = "#FF0000";
        if (capturer == "0") _foregroundColor = "#342E37";

        _capturePercentage = long.Parse(percentage);
        if (_capturePercentage == 100)
        {
            _capturedBy = capturer;
            if (capturer == "1") _backgroundColor = "#00FF00";
            if (capturer == "2") _backgroundColor = "#FF0000";
        }

        InvokeAsync(StateHasChanged);

    }

    private void StartMatch()
    {
        _started = true;

        _timer.StartTimer();
    }

    private void OnTick(object? sender, EventArgs e)
    {
        if (!_started) _started = true;

        InvokeAsync(StateHasChanged);
    }

    private void StopMatch()
    {
        _started = false;
        _timer.PauseTimer();
    }

    private void ResetMatch() {
        _timer.StopTimer();
        _started = false;
    }

    //private void OnFlagUpdate(Dictionary<string, object> state)
    //{
    //    try
    //    {
    //        _capturedBy = $"Team {state["CapturedBy"]}";
    //        _capturePercentage = (long)state["CapturePercentage"];
    //        InvokeAsync(StateHasChanged);
    //    }
    //    catch (Exception e)
    //    {
    //// TODO: should log or something
    //        _logger.LogError("Could not parse flag state");
    //    }
    //}

    //private void OnFlagUpdate(Dictionary<string, object> state)
    //{
    //    try
    //    {
    //        var flagState = FlagState.FromRaw(state);

    //        switch (flagState.Capturer)
    //        {
    //            case 0:
    //                _capturedBy = "none";
    //                break;
    //            case 1:
    //                _capturedBy = "Team 1";
    //                break;
    //            case 2:
    //                _capturedBy = "Team 2";
    //                break;
    //        }

    //        InvokeAsync(StateHasChanged);
    //    }
    //    catch (Exception e)
    //    {
    //        // TODO: should log or something
    //        _logger.LogError("Could not parse flag state");
    //    }
    //}

    public void Dispose()
    {
        _subscription?.Dispose();
    }

}
