@page "/new"
@using MissionSystem.Interface.Services
@using MissionSystem.Interface
@using MissionSystem.Data.Models
@using System.Net.NetworkInformation

@inject IArenaService ArenaService
@inject IGadgetService GadgetService
@inject IGameTypeService GameTypeService

<h3>New Match</h3>

<EditForm Model="@_match" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator/>

    <div class="mb-3">
        <label for="missionInput" class="form-label">Mission</label>
        <InputSelect required id="missionInput" class="form-select" @bind-Value="SelectedGameTypeId">
            <option disabled value="">Select&hellip;</option>
            @if (_gameTypes != null)
            {
                foreach (var (id, type) in _gameTypes)
                {
                    <option value="@id">@type.Name</option>
                }
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="durationInput" class="form-label">Match Duration</label>
        <InputSelect required id="durationInput" class="form-select" @bind-Value="_match.Duration">
            <option disabled value="0">Select&hellip;</option>
            <option value="5">10 Minutes</option>
            <option value="15">15 Minutes</option>
            <option value="20">20 Minutes</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="arenaInput" class="form-label">Arena</label>
        <InputSelect required id="arenaInput" class="form-select" @bind-Value="_match.ArenaId">
            <option disabled value="0">Select&hellip;</option>
            @foreach (var (id, arena) in _arenas)
            {
                <option value="@id">@arena.Name</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="languageInput" class="form-label">Language</label>
        <InputSelect required id="languageInput" class="form-select" @bind-Value="_match.IsEnglish">
            <option value="false">Dutch</option>
            <option value="true">English</option>
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="gadgetSelect" class="form-label">Gadgets</label>
        <InputSelect multiple required id="gadgetSelect" class="form-select" @bind-Value="_match.GadgetIds">
            @foreach (var gadget in FilteredGadgets)
            {
                <option value="@gadget.MacAddress">@gadget.Name</option>
            }
        </InputSelect>
    </div>

    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>

@code {

    private readonly Match _match = new()
    {
        GameTypeId = "",
        ArenaId = 0,
        Duration = 0,
        GadgetIds = new string[] {},
        IsEnglish = false,
    };

    private string SelectedGameTypeId
    {
        get => _match.GameTypeId;
        set
        {
            _match.GameTypeId = value;
            OnSelectGameType();
        }
    }

    private IEnumerable<Gadget> FilteredGadgets
    {
        get
        {
            if (_gameTypes == null || !_gameTypes.ContainsKey(SelectedGameTypeId))
            {
                return Enumerable.Empty<Gadget>();
            }

            var type = _gameTypes[SelectedGameTypeId];

            return _gadgets.Values.Where(g => type.CanUseGadgetType(g.Type));
        }
    }

    private readonly Dictionary<int, Arena> _arenas = new();

    private Dictionary<string, IGameType>? _gameTypes;

    private readonly Dictionary<PhysicalAddress, Gadget> _gadgets = new();

    protected override async Task OnInitializedAsync()
    {
        _gameTypes = GameTypeService.GameTypes;

        foreach (var arena in await ArenaService.GetArenasAsync())
        {
            _arenas[arena.Id] = arena;
        }

        foreach (var gadget in await GadgetService.GetGadgetsAsync())
        {
            _gadgets[gadget.MacAddress] = gadget;
        }

        GadgetService.Added += OnGadgetAdded;
        GadgetService.Deleted += OnGadgetDeleted;

        ArenaService.Added += OnArenaAdded;
        ArenaService.Deleted += OnArenaDeleted;
    }

    private void OnGadgetAdded(Gadget gadget)
    {
        InvokeAsync(() =>
        {
            _gadgets[gadget.MacAddress] = gadget;
            StateHasChanged();
        });
    }

    private void OnGadgetDeleted(Gadget gadget)
    {
        InvokeAsync(() =>
        {
            _gadgets.Remove(gadget.MacAddress);
            StateHasChanged();
        });
    }

    private void OnSelectGameType()
    {
        if (_gameTypes.ContainsKey(SelectedGameTypeId))
        {
            _match.Duration = _gameTypes[SelectedGameTypeId].DefaultDuration;
        }
    }

    private void OnArenaDeleted(Arena arena)
    {
        InvokeAsync(() =>
        {
            _arenas.Remove(arena.Id);
            StateHasChanged();
        });
    }

    private void OnArenaAdded(Arena arena)
    {
        InvokeAsync(() =>
        {
            _arenas[arena.Id] = arena;
            StateHasChanged();
        });
    }

    private void HandleValidSubmit()
    {
    }

    class Match
    {
        public string GameTypeId { get; set; }

        public int Duration { get; set; }

        public int ArenaId { get; set; }

        public string[] GadgetIds { get; set; }

        public bool IsEnglish { get; set; }
    }

}
